require('dotenv').config()
const UserModel = require("../models/userModel");
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken')
const asyncHandle = require('express-async-handler');
const nodemailer = require("nodemailer");

const transporter = nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: 587,
    secure: false, // Use `true` for port 465, `false` for all other ports
    auth: {
        user: process.env.USERNAME_EMAIL,
        pass: process.env.PASSWORD_EMAIL,
    },
})

const handleSendMail = async (val, toEmail) => {
    try {
        await transporter.sendMail({
            from: `"GreenD üëª" <${process.env.USERNAME_EMAIL}>`, // sender address
            to: toEmail, // list of receivers
            subject: "Hello ‚úî", // Subject line
            text: "M√£ c·ªßa m√†y", // plain text body
            html: "<b>32424</b>", // html body
        });
        return 'Ok'
    }
    catch (e) {
        console.log('L·ªói g·ª≠i mail ', e)
        return e
    }
}

const verification = asyncHandle(async (req, res) => {
    const { email } = req.body
    const verificationCode = Math.floor(1000 + Math.random() * 9000);
    try {
        await handleSendMail('', email)
        res.status(200).json({
            message: 'G·ª≠i m√£ x√°c th·ª±c th√†nh c√¥ng',
            data: {
                code: verificationCode
            }
        })
        console.log('M√£ x√°c th·ª±c: ', verificationCode)
    }
    catch (e) {
        console.log('l·ªói varification ', e)
    }

})


const getJsonWebToken = async (email, id) => {
    const payload = { email, id }
    const token = jwt.sign(payload, process.env.SECRET_KEY, {
        expiresIn: '7d',

    })
    return token
}

const register = asyncHandle(async (req, res) => {
    try {
        const { email, password, username } = req.body;

        // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existEmail = await UserModel.findOne({ email });
        if (existEmail) {
            console.log('Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng')
            return res.status(400).json({ message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' });
        }

        // T·∫°o mu·ªëi v√† bƒÉm m·∫≠t kh·∫©u
        const salt = await bcrypt.genSalt(10);
        const hashPassword = await bcrypt.hash(password, salt);

        // T·∫°o ng∆∞·ªùi d√πng m·ªõi v·ªõi m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c bƒÉm
        const newUser = new UserModel({
            email: email,
            username: username ?? '',
            password: hashPassword
        });

        // L∆∞u ng∆∞·ªùi d√πng m·ªõi v√†o c∆° s·ªü d·ªØ li·ªáu
        await newUser.save();

        // Tr·∫£ v·ªÅ ph·∫£n h·ªìi th√†nh c√¥ng
        const accessToken = await getJsonWebToken(email, newUser.id);
        console.log('ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi th√†nh c√¥ng')
        return res.status(200).json({
            message: "ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi th√†nh c√¥ng",
            data: {
                email: newUser.email,
                id: newUser.id,
                accessToken
            }
        });
    } catch (error) {
        // X·ª≠ l√Ω l·ªói
        console.error(error);
        return res.status(500).json({ message: 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ƒëƒÉng k√Ω' });
    }
});


const login = asyncHandle(async (req, res) => {
    const { email, password } = req.body
    const existUser = await UserModel.findOne({ email });
    if (!existUser) {
        res.status(403).json({
            message: 'Email kh√¥ng t√¨m th·∫•y'
        })
        throw new Error('Email kh√¥ng t√¨m th·∫•y')
    }
    const isMatchPassword = await bcrypt.compare(password, existUser.password)
    if (!isMatchPassword) {
        res.status(401).json({
            message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c'
        })
        throw new Error('Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c')
        return;
    }
    res.status(200).json({
        message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
        data: {
            email: existUser.email,
            id: existUser.id,
            accessToken: await getJsonWebToken(email, existUser.id)
        }
    });
})


module.exports = {
    register,
    login,
    verification,
};
